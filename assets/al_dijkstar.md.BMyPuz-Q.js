import{_ as a,c as t,o as e,a4 as r,a3 as i}from"./chunks/framework.DICQ8_im.js";const k=JSON.parse('{"title":"Dijkstar算法","description":"","frontmatter":{},"headers":[],"relativePath":"al/dijkstar.md","filePath":"al/dijkstar.md"}'),s={name:"al/dijkstar.md"},l=r('<h1 id="dijkstar算法" tabindex="-1">Dijkstar算法 <a class="header-anchor" href="#dijkstar算法" aria-label="Permalink to &quot;Dijkstar算法&quot;">​</a></h1><ul><li>求非负边权图中，A点到B点最短路径, 算法复杂度O(NLogN)</li><li><a href="https://usaco.guide/gold/shortest-paths?lang=py" target="_blank" rel="noreferrer">https://usaco.guide/gold/shortest-paths?lang=py</a></li><li><a href="https://zhuanlan.zhihu.com/p/454373256" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/454373256</a></li><li>利用最小堆来维护一个“最短路径”，每次从离出发点距离最近的节点，向下一步可能的节点扩展。</li><li>有很多变形，例如k个充电桩，就不是一个出发点，而是k个，结束条件也是k次遍历到。或者必须经过某一类节点的最短路径，就是两个最短路径的拼接等。</li></ul><h1 id="usaco真题解析" tabindex="-1">USACO真题解析 <a class="header-anchor" href="#usaco真题解析" aria-label="Permalink to &quot;USACO真题解析&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3NzM2Mjk0Mw==&amp;action=getalbum&amp;album_id=3504036533798223878#wechat_redirect" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3NzM2Mjk0Mw==&amp;action=getalbum&amp;album_id=3504036533798223878#wechat_redirect</a><img src="'+i+'"></p>',4),o=[l];function n(_,c,p,h,d,m){return e(),t("div",null,o)}const f=a(s,[["render",n]]);export{k as __pageData,f as default};
