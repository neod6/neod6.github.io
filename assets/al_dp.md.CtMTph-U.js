import{_ as a,c as l,o as i,a2 as e,a4 as t}from"./chunks/framework.DpEepDfE.js";const b=JSON.parse('{"title":"DP算法","description":"","frontmatter":{},"headers":[],"relativePath":"al/dp.md","filePath":"al/dp.md"}'),r={name:"al/dp.md"},o=e('<h1 id="dp算法" tabindex="-1">DP算法 <a class="header-anchor" href="#dp算法" aria-label="Permalink to &quot;DP算法&quot;">​</a></h1><ol><li><p>动态规划（Dynamic Programming，简称DP）通过把原问题分解为相对简单的子问题的方式来求解复杂问题。核心思想包括：</p><ul><li>拆分子问题。将一个大问题拆分成若干个小问题，这些小问题通常具有相似性，可以通过函数关系式递推出来。</li><li>记住过往。通过保存子问题的解，避免重复计算，从而提高计算效率。</li><li>减少重复计算。动态规划致力于解决每个子问题一次，确保在求解原问题时不会重复计算相同的子问题。</li></ul></li><li><p>动态规划的实现方式主要有两种：</p><ul><li>Push自底向上。从最简单的子问题开始，逐步解决更复杂的问题，直到达到原始问题。</li><li>Pull自顶向下。从原始问题出发，分解成子问题，并逐步求解这些子问题。</li></ul></li><li><p>动态规划的应用非常广泛，包括但不限于：</p><ul><li>斐波那契数列。通过动态规划可以避免递归实现中的大量重复计算。</li><li>背包问题。如01背包问题、完全背包问题等，这些都是动态规划的经典应用场景。</li><li>资源分配问题。在多阶段决策过程中，如何最优地分配资源以达到目标是最优化的问题。</li><li>路径优化。在图论中，如最短路径问题，动态规划也是一种有效的解决方法。</li></ul></li></ol><h1 id="usaco真题解析" tabindex="-1">USACO真题解析 <a class="header-anchor" href="#usaco真题解析" aria-label="Permalink to &quot;USACO真题解析&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3NzM2Mjk0Mw==&amp;action=getalbum&amp;album_id=3443339802014433286#wechat_redirect" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3NzM2Mjk0Mw==&amp;action=getalbum&amp;album_id=3443339802014433286#wechat_redirect</a><img src="'+t+'"></p>',4),p=[o];function _(c,s,m,n,d,u){return i(),l("div",null,p)}const P=a(r,[["render",_]]);export{b as __pageData,P as default};
