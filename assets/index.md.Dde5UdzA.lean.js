import{_ as e,c as t,o as l}from"./chunks/framework.DICQ8_im.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"CS算法进阶","tagline":" USACO真题解析 Neo Ding","image":{"src":"/img/neo.jpg","alt":"neo"},"actions":[{"theme":"brand","text":"青铜组","link":"/bronze"},{"theme":"brand","text":"白银组","link":"/silver"},{"theme":"brand","text":"黄金组","link":"/gold"},{"theme":"alt","text":"项目目标","link":"/site"}]},"features":[{"title":"前缀和PS","details":"从数组起点开始，截止当前元素，累加所有元素之和。易懂、有用。结合DP等算法，常常能把程序算法的时间复杂度降低一个O(N)","link":"/ps"},{"title":"动态规划DP","details":null,"link":"/dp"},{"title":"前缀和PS","details":"从数组起点开始，截止当前元素，累加所有元素之和。易懂、有用。结合DP等算法，常常能把程序算法的时间复杂度降低一个O(N)","link":"/ps"},{"title":"动态规划DP","details":null,"link":"/dp"},{"title":"最小生成树MST","details":null},{"title":"前缀和PS","details":"从数组起点开始，截止当前元素，累加所有元素之和。易懂、有用。结合DP等算法，常常能把程序算法的时间复杂度降低一个O(N)","link":"/ps"},{"title":"动态规划DP","details":null,"link":"/dp"},{"title":"最小生成树MST","details":null}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),i={name:"index.md"};function n(a,s,d,o,r,p){return l(),t("div")}const k=e(i,[["render",n]]);export{m as __pageData,k as default};
